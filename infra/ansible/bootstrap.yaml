---
- name: Deploy Talos configuration and ArgoCD setup
  hosts: localhost
  gather_facts: no

  vars:
    talos_dir: "{{ playbook_dir | dirname }}/../talos"
    age_config_dir: "{{ ansible_env.HOME }}/.config/age"
    talos_config_file: "{{ ansible_env.HOME }}/.talos/config"
    control_plane_node: 192.168.178.201
    worker_nodes:
      - 192.168.178.202
      - 192.168.178.203
      - 192.168.178.204

  tasks:
    - name: Create age config directory
      file:
        path: "{{ age_config_dir }}"
        state: directory
        mode: '0700'

    - name: Read age key from 1Password and store it in the config
      shell: "op read op://K8s/age-key/age.key > {{ age_config_dir }}/age.key"
      args:
        creates: "{{ age_config_dir }}/age.key"

    - name: Set permissions for age key
      file:
        path: "{{ age_config_dir }}/age.key"
        mode: '0600'

    - name: Set SOPS_AGE_KEY_FILE environment variable
      ansible.builtin.environment:
        SOPS_AGE_KEY_FILE: "{{ age_config_dir }}/age.key"

    - name: Decrypt Talos controlplane file
      shell: "sops --config {{ playbook_dir }}/.sops.yaml -d {{ talos_dir }}/controlplane.enc.yaml > {{ talos_dir }}/controlplane.yaml"
      args:
        creates: "{{ talos_dir }}/controlplane.yaml"

    - name: Apply Talos controlplane config
      shell: "talosctl apply-config --insecure --nodes {{ control_plane_node }} --file {{ talos_dir }}/controlplane.yaml"

    - name: Wait for controlplane node to be ready
      shell: "talosctl health --nodes {{ control_plane_node }}"
      retries: 10
      delay: 30
      register: health_check
      until: health_check.rc == 0

    - name: Bootstrap Talos controlplane
      shell: "talosctl bootstrap -n {{ control_plane_node }}"

    - name: Wait for Kubernetes controlplane to be ready
      shell: |
        talosctl kubeconfig -n {{ control_plane_node }} --generate-only > /tmp/kubeconfig
        kubectl --kubeconfig=/tmp/kubeconfig get nodes --selector node-role.kubernetes.io/control-plane -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}' | grep True
      retries: 15
      delay: 60
      register: kube_ready
      until: kube_ready.rc == 0

    - name: Decrypt Talos worker-1 file
      shell: "sops --config {{ playbook_dir }}/.sops.yaml -d {{ talos_dir }}/worker-1.enc.yaml > {{ talos_dir }}/worker-1.yaml"
      args:
        creates: "{{ talos_dir }}/worker-1.yaml"

    - name: Decrypt Talos worker-2 file
      shell: "sops --config {{ playbook_dir }}/.sops.yaml -d {{ talos_dir }}/worker-2.enc.yaml > {{ talos_dir }}/worker-2.yaml"
      args:
        creates: "{{ talos_dir }}/worker-2.yaml"

    - name: Decrypt Talos worker-3 file
      shell: "sops --config {{ playbook_dir }}/.sops.yaml -d {{ talos_dir }}/worker-3.enc.yaml > {{ talos_dir }}/worker-3.yaml"
      args:
        creates: "{{ talos_dir }}/worker-3.yaml"

    - name: Apply Talos worker-1 config
      shell: "talosctl apply-config --insecure --nodes 192.168.178.202 --file {{ talos_dir }}/worker-1.yaml"

    - name: Apply Talos worker-2 config
      shell: "talosctl apply-config --insecure --nodes 192.168.178.203 --file {{ talos_dir }}/worker-2.yaml"

    - name: Apply Talos worker-3 config
      shell: "talosctl apply-config --insecure --nodes 192.168.178.204 --file {{ talos_dir }}/worker-3.yaml"

    - name: Generate kubeconfig for the controlplane
      shell: "talosctl kubeconfig -f -n {{ control_plane_node }}"

    - name: Remove decrypted Talos YAML files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ talos_dir }}/controlplane.yaml"
        - "{{ talos_dir }}/worker-1.yaml"
        - "{{ talos_dir }}/worker-2.yaml"
        - "{{ talos_dir }}/worker-3.yaml"

    - name: Apply ArgoCD configuration with Helm and Kustomize
      shell: "kubectl kustomize --enable-helm argocd | kubectl apply -f -"

    - name: Wait for ArgoCD components to be ready
      shell: |
        kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].status.containerStatuses[0].ready}' | grep -q true &&
        kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-repo-server -o jsonpath='{.items[0].status.containerStatuses[0].ready}' | grep -q true &&
        kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-application-controller -o jsonpath='{.items[0].status.containerStatuses[0].ready}' | grep -q true
      retries: 10
      delay: 30
      register: argocd_ready
      until: argocd_ready.rc == 0

    - name: Apply additional kustomize set configurations
      shell: "kubectl kustomize sets/ | kubectl apply -f -"
